import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Завантаження датасету
data = pd.read_csv('your_dataset.csv')

# Відокремлення ознак від цільової змінної, якщо вона є
X = data.drop(['Sl_No', 'Customer Key'], axis=1)

# Нормалізація даних
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Побудова моделі k-means
kmeans = KMeans(n_clusters=3, random_state=42)
kmeans.fit(X_scaled)

# Додавання міток кластерів до датасету
data['Cluster'] = kmeans.labels_

# Виведення результатів
print(data.head())

# Візуалізація кластерів
plt.scatter(X_scaled[:,0], X_scaled[:,1], c=kmeans.labels_, cmap='viridis')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red')
plt.xlabel('Avg_Credit_Limit')
plt.ylabel('Total_Credit_Cards')
plt.title('Clustering of Customers')
plt.show()
#-----------------------------------------------------
plt.figure(figsize=(10, 6))

plt.scatter(data['Avg_Credit_Limit'], data['Total_Credit_Cards'], c=data['Cluster'], cmap='viridis', edgecolor='k', s=100)
plt.xlabel('Avg_Credit_Limit')
plt.ylabel('Total_Credit_Cards')
plt.title('Clustering on Original Data')
plt.colorbar(label='Cluster')
plt.grid(True)
plt.show()
#-------------------------------------------------
from sklearn.metrics import silhouette_score

# Перевірка для різної кількості кластерів
for n_clusters in range(2, 6):
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    kmeans.fit(data)
    cluster_labels = kmeans.labels_
    silhouette_avg = silhouette_score(data, cluster_labels)
    print(f"For n_clusters = {n_clusters}, the average silhouette score is {silhouette_avg:.2f}")
----------------------------------
from sklearn.metrics import silhouette_samples

# Обчислення силуетного коефіцієнта для кожного семплу та його кластера
silhouette_vals = silhouette_samples(data, cluster_labels)

# Вивід силуетного коефіцієнта для кожного семплу та його кластера
for i in range(len(data)):
    print(f"Sample {i}: Cluster {cluster_labels[i]}, Silhouette score: {silhouette_vals[i]:.2f}")
-----------------------------------------
from sklearn.metrics import silhouette_samples
import numpy as np

# Обчислення силуетного коефіцієнта для кожного семпла та його кластера
silhouette_vals = silhouette_samples(data, cluster_labels)

# Обчислення середнього силуетного коефіцієнта для кожного кластера
cluster_silhouette_scores = []
for cluster in range(kmeans.n_clusters):
    cluster_silhouette_vals = silhouette_vals[cluster_labels == cluster]
    cluster_silhouette_score = np.mean(cluster_silhouette_vals)
    cluster_silhouette_scores.append(cluster_silhouette_score)
    print(f"Cluster {cluster}: Silhouette score: {cluster_silhouette_score:.2f}")

# Вивід середнього силуетного коефіцієнта для кожного кластера
for cluster, score in enumerate(cluster_silhouette_scores):
    print(f"Cluster {cluster}: Average silhouette score: {score:.2f}")
=-------------
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Створення та навчання моделі kNN
k = 5  # кількість сусідів
knn = KNeighborsClassifier(n_neighbors=k)
knn.fit(X_train, y_train)

# Класифікація тестових семплів
y_pred = knn.predict(X_test)

# Оцінка точності моделі
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
